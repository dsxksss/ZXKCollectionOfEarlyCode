//分析其空间管理机制
//例子一
let a={age:12};//创建了一个名字为a的obj
let b=a;//这里的b是一个引用,看似是将a的内容赋值给了a，实际上是将a的内存空间管理权限也交给b
console.log('b=',b);// >{age:12}

//这两个变量实际上是在堆内存中共用了一个值
b.age=24;//这里看似是修改了b里面的内容，实际上是修改了a的内容，因为b拥有a空间的控制权限
console.log('a=',a);// >{age:24}

//例子二
let c={age:2};
let d=c;
console.log('d=',d);// >{age:2}

d={age:442};//将另一个内存空间赋值给了d，所以下列操作不会影响其值，空间已经不是同一个了，而是分开了
c.age=87;
console.log('c=%o,d=%o',c,d);// >c={age:87},d={age:442}

//浅拷贝与深拷贝(也叫浅复制或深复制)
//浅拷贝:只对对象的第一层键值进行复制，如果其中某个键存储的是引用类型的数据，
//赋值的将会是该键所存储的地址，那么，很显然，以下面的示例为例，浅拷贝会导致a.tag和b.tag
//指向的是同一个地址。
